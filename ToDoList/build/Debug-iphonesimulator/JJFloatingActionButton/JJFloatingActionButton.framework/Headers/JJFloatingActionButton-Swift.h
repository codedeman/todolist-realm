// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JJFloatingActionButton",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIColor;
@class UIImage;
@class UILabel;
@class UIImageView;
@class JJCircleView;
enum JJActionItemTitlePosition : NSInteger;
@class NSCoder;

/// The item view representing an action.
SWIFT_CLASS("_TtC22JJFloatingActionButton12JJActionItem")
@interface JJActionItem : UIControl
/// The action that is executed when the item is tapped.
/// Default is <code>nil</code>.
/// \param item The action item that has been tapped.
///
@property (nonatomic, copy) void (^ _Nullable action)(JJActionItem * _Nonnull);
/// Calls the action on the action item.
- (void)callAction;
/// The color of action item circle view.
/// Default is <code>UIColor.white</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) UIColor * _Nonnull buttonColor;
/// The color of action item circle view with highlighted state.
/// Default is <code>nil</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) UIColor * _Nullable highlightedButtonColor;
/// The image displayed by the item.
/// Default is <code>nil</code>.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) UIImage * _Nullable buttonImage;
/// The tint color of the image view.
/// By default the color of the floating action button is used.
/// warning:
/// Only template images are colored.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) UIColor * _Nonnull buttonImageColor;
/// The title label of the item. Can be configured as needed.
/// Read only.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// The image view of the item. Can be configured as needed.
/// Read only.
/// seealso:
/// <code>buttonImage</code>
/// seealso:
/// <code>buttonImageColor</code>
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The background circle of the item. Can be configured as needed.
/// Read only.
/// seealso:
/// <code>buttonColor</code>
/// seealso:
/// <code>highlightedButtonColor</code>
@property (nonatomic, readonly, strong) JJCircleView * _Nonnull circleView;
/// The position of the title label. Default is <code>.leading</code>.
@property (nonatomic) enum JJActionItemTitlePosition titlePosition;
/// The position of the title label. Default is <code>-1</code>.
/// When <code>titleSpacing</code> is negative default spacing is used:
/// DefaultÂ horizontal spacing is <code>12</code>.
/// Default vertical spacing is <code>4</code>.
@property (nonatomic) CGFloat titleSpacing;
/// The size of the image view. Default is <code>(0, 0)</code>.
/// When imageSize is <code>.zero</code> the image is shrunken until it fits
/// completely into the circle view. If it already does the actual
/// size of the image is used.
@property (nonatomic) CGSize imageSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
/// \param aDecoder An unarchiver object.
///
///
/// returns:
/// <code>self</code>, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end






@interface JJActionItem (SWIFT_EXTENSION(JJFloatingActionButton))
/// Tells the view that its superview changed.
- (void)didMoveToSuperview;
/// Updates constraints for the view.
- (void)updateConstraints;
@end


@interface JJActionItem (SWIFT_EXTENSION(JJFloatingActionButton))
/// A Boolean value indicating whether the action item draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end





/// Action item title position.
typedef SWIFT_ENUM(NSInteger, JJActionItemTitlePosition, closed) {
/// Place the title at the leading edge of the circle view.
  JJActionItemTitlePositionLeading = 0,
/// Place the title at the trailing edge of the circle view.
  JJActionItemTitlePositionTrailing = 1,
/// Place the title at the left edge of the circle view.
  JJActionItemTitlePositionLeft = 2,
/// Place the title at the right edge of the circle view.
  JJActionItemTitlePositionRight = 3,
/// Place the title at the top edge of the circle view.
  JJActionItemTitlePositionTop = 4,
/// Place the title at the bottom edge of the circle view.
  JJActionItemTitlePositionBottom = 5,
/// Hide the title all together.
  JJActionItemTitlePositionHidden = 6,
};


/// General animation configuration settings
SWIFT_CLASS("_TtC22JJFloatingActionButton19JJAnimationSettings")
@interface JJAnimationSettings : NSObject
/// Duration of the animation.
/// Default is <code>0.3</code>
@property (nonatomic) NSTimeInterval duration;
/// Damping ratio of the animation.
/// Default is <code>0.55</code>
/// remark:
/// Not used for transitions.
@property (nonatomic) CGFloat dampingRatio;
/// Initial velocity of the animation.
/// Default is <code>0.3</code>
/// remark:
/// Not used for transitions.
@property (nonatomic) CGFloat initialVelocity;
/// Delay in between two item animations.
/// Default is <code>0.1</code>
/// remark:
/// Only used for item animations.
@property (nonatomic) NSTimeInterval interItemDelay;
/// Initializes and returns a newly allocated animation settings object with specified parameters.
/// \param duration Duration of the animation. Default is <code>0.3</code>.
///
/// \param dampingRatio Damping ratio of the animation. Default is <code>0.55</code>
///
/// \param initialVelocity Initial velocity of the animation. Default is <code>0.3</code>
///
/// \param interItemDelay Delay in between two item animations. Default is <code>0.1</code>
///
///
/// returns:
/// An initialized animation settings object.
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration dampingRatio:(CGFloat)dampingRatio initialVelocity:(CGFloat)initialVelocity interItemDelay:(NSTimeInterval)interItemDelay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum JJButtonAnimationStyle : NSInteger;

/// Button animation configuration
SWIFT_CLASS("_TtC22JJFloatingActionButton30JJButtonAnimationConfiguration")
@interface JJButtonAnimationConfiguration : NSObject
/// Initializes and returns a newly allocated button animation configuration object with the specified style.
/// \param style The animation style.
///
///
/// returns:
/// An initialized button animation configuration object.
- (nonnull instancetype)initWithStyle:(enum JJButtonAnimationStyle)style OBJC_DESIGNATED_INITIALIZER;
/// Button animation style
/// Possible values:
/// <ul>
///   <li>
///     <code>.rotation</code>
///   </li>
///   <li>
///     <code>.transition</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) enum JJButtonAnimationStyle style;
/// The angle in radian the button will rotate to when opening.
/// remark:
/// Is ignored for style <code>.rotation</code>
@property (nonatomic) CGFloat angle;
/// The image button will transition to when opening.
/// remark:
/// Is ignored for style <code>.transition</code>
@property (nonatomic, strong) UIImage * _Nullable image;
/// Animation settings for opening animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.55</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.3</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull opening;
/// Animation settings for closing animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.6</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.8</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull closing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Button animation style
typedef SWIFT_ENUM(NSInteger, JJButtonAnimationStyle, closed) {
/// Rotate button image to given angle.
  JJButtonAnimationStyleRotation = 0,
/// Transition to given image.
  JJButtonAnimationStyleTransition = 1,
};


@interface JJButtonAnimationConfiguration (SWIFT_EXTENSION(JJFloatingActionButton))
/// Returns a button animation configuration that rotates the button image by given angle.
/// \param angle The angle in radian the button will rotate to when opening.
///
///
/// returns:
/// A button animation configuration object.
+ (JJButtonAnimationConfiguration * _Nonnull)rotationToAngle:(CGFloat)angle SWIFT_WARN_UNUSED_RESULT;
/// Returns a button animation configuration that transitions to a given image.
/// \param image The image button will transition to when opening.
///
///
/// returns:
/// A button animation configuration object.
+ (JJButtonAnimationConfiguration * _Nonnull)transitionToImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
@end


/// A colored circle with an highlighted state
SWIFT_CLASS("_TtC22JJFloatingActionButton12JJCircleView")
@interface JJCircleView : UIView
/// The color of the circle.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The color of the circle when highlighted. Default is <code>nil</code>.
@property (nonatomic, strong) UIColor * _Nullable highlightedColor;
/// A Boolean value indicating whether the circle view draws a highlight.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isHighlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Returns an object initialized from data in a given unarchiver.
/// \param aDecoder An unarchiver object.
///
///
/// returns:
/// <code>self</code>, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Draws the receiverâs image within the passed-in rectangle
/// Overrides <code>draw(rect: CGRect)</code> from <code>UIView</code>.
- (void)drawRect:(CGRect)_;
@end



@protocol JJFloatingActionButtonDelegate;
enum JJFloatingActionButtonState : NSInteger;

/// A floating action button.
/// \code
/// let actionButton = JJFloatingActionButton()
///
/// actionButton.addItem(title: "item 1", image: image1) { item in
///     // do something
/// }
///
/// actionButton.addItem(title: "item 2", image: image2) { item in
///     // do something
/// }
///
/// view.addSubview(actionButton)
///
/// \endcode
SWIFT_CLASS("_TtC22JJFloatingActionButton22JJFloatingActionButton")
@interface JJFloatingActionButton : UIControl
/// The delegate object for the floating action button.
@property (nonatomic, weak) id <JJFloatingActionButtonDelegate> _Nullable delegate;
/// The list of action items.
/// Default is <code>[]</code>.
/// seealso:
/// <code>enabledItems</code>
@property (nonatomic, copy) NSArray<JJActionItem *> * _Nonnull items;
/// The background color of the floating action button.
/// Default is <code>UIColor(hue: 0.31, saturation: 0.37, brightness: 0.76, alpha: 1.00)</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) UIColor * _Nonnull buttonColor;
/// The background color of the floating action button with highlighted state.
/// Default is <code>nil</code>.
/// seealso:
/// <code>circleView</code>
@property (nonatomic, strong) UIColor * _Nullable highlightedButtonColor;
/// The image displayed on the button by default.
/// When only one <code>JJActionItem</code> is added and <code>handleSingleActionDirectly</code> is enabled,
/// the image from the item is shown instead.
/// When set to <code>nil</code> an image of a plus sign is used.
/// Default is <code>nil</code>.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) UIImage * _Nullable buttonImage;
/// The size of the image view.
/// Default is <code>CGSize.zero</code>.
/// If set to <code>.zero</code> the actual size of the image is used.
/// seealso:
/// <code>imageView</code>
@property (nonatomic) CGSize buttonImageSize;
/// The tint color of the image view.
/// Default is <code>UIColor.white</code>.
/// warning:
/// Only template images are colored.
/// seealso:
/// <code>imageView</code>
@property (nonatomic, strong) UIColor * _Nonnull buttonImageColor;
/// The default diameter of the floating action button.
/// This is ignored if the size is defined by auto-layout.
/// Default is <code>56</code>.
@property (nonatomic) CGFloat buttonDiameter;
/// The size of an action item in relation to the floating action button.
/// Default is <code>0.75</code>.
@property (nonatomic) CGFloat itemSizeRatio;
/// When enabled and only one action item is added, the floating action button will not open,
/// but the action from the action item will be executed directly when the button is tapped.
/// Also the image of the floating action button will be replaced with the one from the action item.
/// Default is <code>true</code>.
@property (nonatomic) BOOL handleSingleActionDirectly;
/// When enabled, the floating action button will close after an action item was tapped,
/// otherwise the action button will stay open and has to be closed explicitly.
/// Default is <code>true</code>.
/// seealso:
/// <code>close</code>
@property (nonatomic) BOOL closeAutomatically;
/// The current state of the floating action button.
/// Possible values are
/// <ul>
///   <li>
///     <code>.opening</code>
///   </li>
///   <li>
///     <code>.open</code>
///   </li>
///   <li>
///     <code>.closing</code>
///   </li>
///   <li>
///     <code>.closed</code>
///   </li>
/// </ul>
@property (nonatomic, readonly) enum JJFloatingActionButtonState buttonState;
/// The round background view of the floating action button.
/// Read only.
/// seealso:
/// <code>buttonColor</code>
/// seealso:
/// <code>highlightedButtonColor</code>
@property (nonatomic, readonly, strong) JJCircleView * _Nonnull circleView;
/// The image view of the floating action button.
/// Read only.
/// warning:
/// Setting the image of the <code>imageView</code> directly will not work.
/// Use <code>buttonImage</code> instead.
/// seealso:
/// <code>buttonImage</code>
/// seealso:
/// <code>buttonImageColor</code>
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;
/// The overlay view.
/// Default background color is <code>UIColor(white: 0, alpha: 0.5)</code>.
/// Read only.
@property (nonatomic, readonly, strong) UIControl * _Nonnull overlayView;
/// Initializes and returns a newly allocated floating action button object with the specified frame rectangle.
/// seealso:
/// init?(coder: NSCoder)
/// \param frame The frame rectangle for the floating action button, measured in points.
/// The origin of the frame is relative to the superview in which you plan to add it.
/// This method uses the frame rectangle to set the center and bounds properties accordingly.
///
///
/// returns:
/// An initialized floating action button object.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
/// \param aDecoder An unarchiver object.
///
///
/// returns:
/// <code>self</code>, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a newly allocated floating action button object with the specified image and action.
/// seealso:
/// init(frame: CGRect)
/// \param image The image of the action item. Default is <code>nil</code>.
///
/// \param action The action handler of the action item. Default is <code>nil</code>.
///
///
/// returns:
/// An initialized floating action button object.
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image action:(void (^ _Nullable)(JJActionItem * _Nonnull))action;
@end



@class UIViewController;

@interface JJFloatingActionButton (SWIFT_EXTENSION(JJFloatingActionButton))
/// Add floating action button to a given superview and place in trailing bottom corner.
/// remark:
/// On iOS prior to iOS 11 <code>safeAreaInset</code> is ignored.
/// \param superview The view to which the floating action button is added as a subview.
///
/// \param bottomInset The (minimum) bottom vertical spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param trailingInset The (minimum) trailing horizontal spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param safeAreaInset The (minimum) spacing in points between button and safe area of the superview.
/// Default is <code>0</code>.
///
- (void)displayInView:(UIView * _Nonnull)superview bottomInset:(CGFloat)bottomInset trailingInset:(CGFloat)trailingInset safeAreaInset:(CGFloat)safeAreaInset;
/// Add floating action button to a view of a given view controller and place in trailing bottom corner.
/// remark:
/// On iOS prior to iOS 11 <code>safeAreaInset</code> is ignored.
/// \param viewController The view controller to which view the floating action button is added as a subview.
///
/// \param bottomInset The (minimum) bottom vertical spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param trailingInset The (minimum) trailing horizontal spacing in points between button and superview.
/// Default is <code>16</code>.
///
/// \param safeAreaInset The (minimum) spacing in points between button and safe area of the view controllers view.
/// Default is <code>0</code>.
///
- (void)displayInViewController:(UIViewController * _Nonnull)viewController bottomInset:(CGFloat)bottomInset trailingInset:(CGFloat)trailingInset safeAreaInset:(CGFloat)safeAreaInset;
@end




@interface JJFloatingActionButton (SWIFT_EXTENSION(JJFloatingActionButton))
/// Open the floating action button and show all action items.
/// remark:
/// Hidden items and items that have user interaction disabled are omitted.
/// seealso:
/// <code>buttonAnimationConfiguration</code>
/// seealso:
/// <code>itemAnimationConfiguration</code>
/// \param animated When true, button will be opened with an animation. Default is <code>true</code>.
///
/// \param completion Will be handled upon completion. Default is <code>nil</code>.
///
- (void)openWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Close the floating action button and hide all action items.
/// seealso:
/// <code>buttonAnimationConfiguration</code>
/// seealso:
/// <code>itemAnimationConfiguration</code>
/// \param animated When true, button will be close with an animation. Default is <code>true</code>.
///
/// \param completion Will be handled upon completion. Default is <code>nil</code>.
///
- (void)closeWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end










@interface JJFloatingActionButton (SWIFT_EXTENSION(JJFloatingActionButton))
/// A Boolean value indicating whether the action button draws a highlight.
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end


@interface JJFloatingActionButton (SWIFT_EXTENSION(JJFloatingActionButton))
/// The natural size for the floating action button.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Updates constraints for the view.
- (void)updateConstraints;
/// Tells the view that its superview changed.
- (void)didMoveToSuperview;
@end




@interface JJFloatingActionButton (SWIFT_EXTENSION(JJFloatingActionButton))
/// Add an action item with title, image and action to the list of items.
/// The item will be pre configured with the default values.
/// \param title The title of the action item. Default is <code>nil</code>.
///
/// \param image The image of the action item. Default is <code>nil</code>.
///
/// \param action The action handler of the action item. Default is <code>nil</code>.
///
///
/// returns:
/// The item that was added. This can be configured after it has been added.
- (JJActionItem * _Nonnull)addItemWithTitle:(NSString * _Nullable)title image:(UIImage * _Nullable)image action:(void (^ _Nullable)(JJActionItem * _Nonnull))action;
/// Add an action item to the list of items.
/// The item will be updated with the default configuration values.
/// \param item The action item.
///
- (void)addItem:(JJActionItem * _Nonnull)item;
/// Remove an action item from the list of items.
/// \param item The action item.
///
///
/// returns:
/// The item that was removed. <code>nil</code> if <code>item</code> was not found.
- (JJActionItem * _Nullable)removeItem:(JJActionItem * _Nonnull)item;
/// Remove and returns the action item at the specified position in the list of items.
/// \param index The index of the action item. <code>index</code> must
/// be a valid index of the list of items.
///
///
/// returns:
/// The item that was removed.
- (JJActionItem * _Nonnull)removeItemAt:(NSInteger)index;
/// Calls the given closure on each item that is or was added to the floating action button.
/// Default is <code>nil</code>.
/// \code
/// let actionButton = JJFloatingActionButton()
///
/// actionButton.configureDefaultItem { item in
///     item.imageView.contentMode = .scaleAspectFill
///
///     item.titleLabel.font = .systemFont(ofSize: 14)
///
///     item.layer.shadowColor = UIColor.black.cgColor
///     item.layer.shadowOpacity = 0.3
///     item.layer.shadowOffset = CGSize(width: 1, height: 1)
///     item.layer.shadowRadius = 0
/// }
///
/// \endcode\param body A closure that takes an action item as a parameter.
///
- (void)configureDefaultItem:(void (^ _Nullable)(JJActionItem * _Nonnull))body;
/// All items that will be shown when floating action button is opened.
/// This excludes hidden items and items that have user interaction disabled.
@property (nonatomic, readonly, copy) NSArray<JJActionItem *> * _Nonnull enabledItems;
@end




@interface JJFloatingActionButton (SWIFT_EXTENSION(JJFloatingActionButton))
/// The shadow color of the floating action button.
/// Default is <code>UIColor.black</code>.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/// The shadow offset of the floating action button.
/// Default is <code>CGSize(width: 0, height: 1)</code>.
@property (nonatomic) CGSize shadowOffset;
/// The shadow opacity of the floating action button.
/// Default is <code>0.4</code>.
@property (nonatomic) float shadowOpacity;
/// The shadow radius of the floating action button.
/// Default is <code>2</code>.
@property (nonatomic) CGFloat shadowRadius;
@end


/// Floating action button delegate protocol
SWIFT_PROTOCOL("_TtP22JJFloatingActionButton30JJFloatingActionButtonDelegate_")
@protocol JJFloatingActionButtonDelegate
@optional
/// Is called before opening animation. Button state is .opening.
- (void)floatingActionButtonWillOpen:(JJFloatingActionButton * _Nonnull)button;
/// Is called after opening animation. Button state is .opened.
- (void)floatingActionButtonDidOpen:(JJFloatingActionButton * _Nonnull)button;
/// Is called before closing animation. Button state is .closing.
- (void)floatingActionButtonWillClose:(JJFloatingActionButton * _Nonnull)button;
/// Is called after closing animation. Button state is .closed.
- (void)floatingActionButtonDidClose:(JJFloatingActionButton * _Nonnull)button;
@end

/// Button state.
typedef SWIFT_ENUM(NSInteger, JJFloatingActionButtonState, closed) {
/// No items are visible
  JJFloatingActionButtonStateClosed = 0,
/// Items are fully visible
  JJFloatingActionButtonStateOpen = 1,
/// During opening animation
  JJFloatingActionButtonStateOpening = 2,
/// During closing animation
  JJFloatingActionButtonStateClosing = 3,
};

@class JJItemLayout;
@class JJItemPreparation;

/// Item animation configuration
SWIFT_CLASS("_TtC22JJFloatingActionButton28JJItemAnimationConfiguration")
@interface JJItemAnimationConfiguration : NSObject
/// Animation settings for opening animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.55</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.3</code>
///   </li>
///   <li>
///     <code>interItemDelay = 0.1</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull opening;
/// Animation settings for closing animation.
/// Default values are:
/// <ul>
///   <li>
///     <code>duration = 0.3</code>
///   </li>
///   <li>
///     <code>dampingRatio = 0.6</code>
///   </li>
///   <li>
///     <code>initialVelocity = 0.8</code>
///   </li>
///   <li>
///     <code>interItemDelay = 0.1</code>
///   </li>
/// </ul>
@property (nonatomic, strong) JJAnimationSettings * _Nonnull closing;
/// Defines the layout of the acton items when opened.
/// Default is a layout in a vertical line with 12 points inter item spacing
@property (nonatomic, strong) JJItemLayout * _Nonnull itemLayout;
/// Configures the items before opening. The change from open to closed state is animated.
/// Default is a scale by factor <code>0.4</code> and <code>item.alpha = 0</code>.
@property (nonatomic, strong) JJItemPreparation * _Nonnull closedState;
/// Configures the items for open state. The change from open to closed state is animated.
/// Default is <code>item.transform = .identity</code> and <code>item.alpha = 1</code>.
@property (nonatomic, strong) JJItemPreparation * _Nonnull openState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface JJItemAnimationConfiguration (SWIFT_EXTENSION(JJFloatingActionButton))
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .verticalLine()</code>
///   </li>
///   <li>
///     <code>closedState = .scale()</code>
///   </li>
/// </ul>
/// \param interItemSpacing The distance between two adjacent items.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)popUpWithInterItemSpacing:(CGFloat)interItemSpacing SWIFT_WARN_UNUSED_RESULT;
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .verticalLine()</code>
///   </li>
///   <li>
///     <code>closedState = .horizontalOffset()</code>
///   </li>
/// </ul>
/// \param interItemSpacing The distance between two adjacent items.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)slideInWithInterItemSpacing:(CGFloat)interItemSpacing SWIFT_WARN_UNUSED_RESULT;
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .circular()</code>
///   </li>
///   <li>
///     <code>closedState = .scale()</code>
///   </li>
/// </ul>
/// \param radius The distance between the center of an item and the center of the button itself.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)circularPopUpWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
/// Returns an item animation configuration with
/// <ul>
///   <li>
///     <code>itemLayout = .circular()</code>
///   </li>
///   <li>
///     <code>closedState = .circularOffset()</code>
///   </li>
/// </ul>
/// \param radius The distance between the center of an item and the center of the button itself.
///
///
/// returns:
/// An item animation configuration object.
+ (JJItemAnimationConfiguration * _Nonnull)circularSlideInWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
@end


/// Item layout
SWIFT_CLASS("_TtC22JJFloatingActionButton12JJItemLayout")
@interface JJItemLayout : NSObject
/// A closure that defines the layout of given action items relative to an action button.
@property (nonatomic, copy) void (^ _Nonnull layout)(NSArray<JJActionItem *> * _Nonnull, JJFloatingActionButton * _Nonnull);
/// Initializes and returns a newly allocated item layout object with given layout closure.
/// \param layout A closure that defines the the layout of given action items relative to an action button.
///
///
/// returns:
/// An initialized item layout object.
- (nonnull instancetype)initWithLayout:(void (^ _Nonnull)(NSArray<JJActionItem *> * _Nonnull, JJFloatingActionButton * _Nonnull))layout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Item preparation
SWIFT_CLASS("_TtC22JJFloatingActionButton17JJItemPreparation")
@interface JJItemPreparation : NSObject
/// A closure that prepares a given action item for animation.
@property (nonatomic, copy) void (^ _Nonnull prepare)(JJActionItem * _Nonnull, NSInteger, NSInteger, JJFloatingActionButton * _Nonnull);
/// Initializes and returns a newly allocated item preparation object with given prepare closure.
/// \param layout A closure that defines the the layout of given action items relative to an action button.
///
///
/// returns:
/// An initialized item layout object.
- (nonnull instancetype)initWithPrepare:(void (^ _Nonnull)(JJActionItem * _Nonnull, NSInteger, NSInteger, JJFloatingActionButton * _Nonnull))prepare OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
